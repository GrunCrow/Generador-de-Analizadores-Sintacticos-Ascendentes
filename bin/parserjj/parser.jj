options {
  STATIC=false;
}

PARSER_BEGIN(ProyectoParser)


package parserjj;

public class ProyectoParser {
	
}

PARSER_END(ProyectoParser)


/* WHITE SPACE */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

/* COMMENTS */

SKIP :
{
  <MULTI_LINE_COMMENT: "/*" ( ("*")* ~["*","/"] | "/" )* ("*")+ "/" >
}


TOKEN :
{
  < BAR: "|" >
| < SEMICOLON: ";" >
| < EQ: "::=" >
| < NOTERMINAL: ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","0"-"9","_"] )* >
| < TERMINAL: "<" ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","0"-"9","_"] )* ">" >
}

//Analisis sintactio sintactico descendente

/**
* Reconoce el contenido completo de un archivo Proyecto
*
* Gramatica ::= ( Definicion )*
*/
void Gramatica():
{}
{
	( Definicion() )*
}

/**
* Definicion ::= NOTERMINAL EQ ListaReglas SEMICOLON
*/
void Definicion():
{}
{
	<NOTERMINAL> <EQ> ListaReglas() <SEMICOLON>  
}

/**
* ListaReglas ::= Regla (BAR Regla)*
*/
void ListaReglas():
{}
{
	Regla() ( <BAR> Regla() )*
}

/**
* Regla ::= (NOTERMINAL | TERMINAL)*
*/
void Regla():
{}
{
	( <NOTERMINAL> | <TERMINAL> )*	  
}

	   
  
