CompilationUnit ::= ImportClauseList TintoDecl
;

ImportClauseList ::= ImportClauseList ImportClause
| 
;

ImportClause ::= <import> <identifier> <semicolon>
;

TintoDecl ::= LibraryDecl
| NativeDecl
;

LibraryDecl ::= <library> <identifier> <lbrace> FunctionList <rbrace>
;

FunctionList ::= FunctionList FunctionDecl
| 
; 

FunctionDecl ::= Access FunctionType <identifier> ArgumentDecl FunctionBody
;

NativeDecl ::= <native> <identifier> <lbrace> NativeFunctionList <rbrace>
;

NativeFunctionList ::= NativeFunctionList NativeFunctionDecl
|
;

NativeFunctionDecl ::= Access FunctionType <identifier> ArgumentDecl <semicolon>
;

Access ::= <public>
| <private>
;

FunctionType ::= Type
| <void>
;

Type ::= <int>
| <char>
| <boolean>
;

ArgumentDecl ::= <lparen> <rparen>
| <lparen> ArgumentList <rparen>
;

ArgumentList ::= Argument
| ArgumentList <comma> Argument
;

Argument ::= Type <identifier>
;

FunctionBody ::= <lbrace> StatementList <rbrace>
;

StatementList ::= StatementList Statement
| 
; 

Statement ::= Decl
| IdStm
| IfStm
| WhileStm
| ReturnStm
| NoStm
| BlockStm
;

Decl ::= Type IdList <semicolon>
;

IdList ::= <identifier>
| <identifier> <assign> Expr
| IdList <comma> <identifier>
| IdList <comma> <identifier> <assign> Expr
;

IfStm ::= <if> <lparen> Expr <rparen> Statement
| <if> <lparen> Expr <rparen> Statement <else> Statement
;

WhileStm ::= <while> <lparen> Expr <rparen> Statement
;

ReturnStm ::= <return> Expr <semicolon>
| <return> <semicolon>
;

NoStm ::= <semicolon>
;

IdStm ::= <identifier> <assign> Expr <semicolon>
| <identifier> FunctionCall <semicolon>
| <identifier> <dot> <identifier> FunctionCall <semicolon>
;

BlockStm ::= <lbrace> StatementList <rbrace>
;

Expr ::= AndExpr
| Expr <or> AndExpr
;

AndExpr ::= RelExpr
| AndExpr <and> RelExpr
;

RelExpr ::= SumExpr
| SumExpr <eq> SumExpr
| SumExpr <ne> SumExpr
| SumExpr <gt> SumExpr
| SumExpr <ge> SumExpr
| SumExpr <lt> SumExpr
| SumExpr <le> SumExpr
;

SumExpr ::= <not> ProdExpr
| <minus> ProdExpr
| <plus> ProdExpr
| ProdExpr
| SumExpr <minus> ProdExpr
| SumExpr <plus> ProdExpr
;

ProdExpr ::= Factor
| ProdExpr <prod> Factor
| ProdExpr <div> Factor
| ProdExpr <mod> Factor
;

Factor ::= Literal
| Reference
| <lparen> Expr <rparen>
;

Literal ::= <integer_literal>
| <char_literal>
| <true>
| <false>
;

Reference ::= <identifier>
| <identifier> FunctionCall
| <identifier> <dot> <identifier> FunctionCall
;

FunctionCall ::= <lparen> <rparen>
| <lparen> ExprList <rparen>
;

ExprList ::= Expr
| ExprList <comma> Expr
;
